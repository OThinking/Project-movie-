import pandas as pd
import numpy as np
from sklearn.model_selection import train_test_split
from konlpy.tag import Okt
from tensorflow.keras.preprocessing.text import Tokenizer
from tensorflow.keras.preprocessing.sequence import pad_sequences
from sklearn.preprocessing import LabelEncoder
from tensorflow.keras.utils import to_categorical
import pickle

df = pd.read_csv('./movie_concat_data_20240129.csv')
print(df.head())
df.info()

X = df['synopsis']
Y = df['category']

label_encoder = LabelEncoder()
labeled_y = label_encoder.fit_transform(Y) # category에 라벨(0, 1, 2)부여
print(labeled_y[:])
label = label_encoder.classes_ # label을 무엇을 줬는지 확인 할 수 있다
print(label)
with open('./models/label_encoder.pickle', 'wb') as f: # pickle은 바이너리 상태로 그대로 저장 / 예를 들어 문자열을 저장하면 문자열로 숫자형이면 숫자형으로 가져온다
    # wb: 바이너리 쓰기모드 / 바이너리(b): 컴퓨터가 처리하는 파일 형식
    pickle.dump(label_encoder, f) # pickle.dump(): 파이썬 객체를 파일에 저장해 준다 / label_encoder라는 파이썬 객체를 f.pickle이라는 피클확장자 파일로 저장
onehot_y = to_categorical(labeled_y) # 원-핫 인코딩된 벡터로 변환 / 기본값: num_classes=None / 현재 labeled_y에 3개만 지정되어있으면 1 0 0 / 0 1 0 / 0 0 1로 저장됨
print(onehot_y[:3])
print(X[1:5])

# 자연어 처리 시작
okt = Okt() # 형태소 분리를 해준다 / 형태소: 단어 하나하나 짜르는것을 의미
# 예시1: okt.nomalize(text) text에 '안녕하세욬ㅋㅋㅋ 반가워요 사릉해' 라고 들어있으면 '안녕하세요ㅋㅋㅋ 반가워요 사랑해' 로 변환해준다
temp = []
# 예시2: ['문재인', '생일', '날', '엔', '산행'] 앞에와 같이 분리해준다 / stem=False: ['말씀드렸다']

for i in range(len(X)):
    X[i] = okt.morphs(X[i], stem=True)
    # morphs: 형태소 기반으로 리스트 형태로 리턴해주는 함수
    # stem=True를 주면 다음과 같이 원형으로 바꿔준다: [말씀드리다]
    if i % 10000:
        print(i)
print(len(X))
print(X[:])
print(temp)
# print(X[0])
# 한글자짜리는 학습이 안된다 => [등장, 한] 이와같이 분리를 해주는데 '한'은 등장한으로 원래는 등장하다로 분류가 되어야하는데 분리가 완벽하게 되지 않기 때문이다
# 불용어: 예를들어 '그녀'는 엄마인지 누나인지 친구인지 누구인지 알 수가 없다 /이와같은 것을 불용어라고한다 => 감탄사, 접미사, 대명사 등이 있다
stopwords = pd.read_csv('./stopwords.csv', index_col=0)
for j in range(len(X)):
    words = []
    for i in range(len(X[j])):
        if len(X[j][i]) > 1: # 한글자짜리는 다 제외 하겠다 / 의미학습이 제대로 되지 않아서 제외한다 / 예를들어 물 이라는 한글자가 물방울의 물이 될 수 있고 물건의 물이 될 수 있기에 
            if X[j][i] not in list(stopwords['stopword']): # 불용어에 포함되지 않으면
                words.append(X[j][i])
    X[j] = ' '.join(words)
    # '구분자'.join(리스트): 리스트의 값과 값 사이에 '구분자'에 들어온 구분자를 넣어서 하나의 문자열로 합쳐준다
    # 예시: '_'.join(['a', 'b', 'c']) 라 하면 "a_b_c" 와 같은 형태로 문자열을 만들어서 반환
# print(X[:5])

token = Tokenizer() # 객체 생성
# Tokenizer: 토큰화와 정수인코딩을 할때 사용하는 모듈
# 토큰화: 텍스트 뭉치를 단어, 구 등 의미있는 element로 잘게 나누는 작업을 의미
# 정수인코딩: 딥러닝 모델이 읽을 수 있도록 토큰화된 문자를 숫자로 변경해주는 작업
token.fit_on_texts(X) # fit_on_texts: 글자와 숫자 정보를 맵핑하는 작업
# 예시: {'오늘': 1, '있어': 2, '주식': 3} 이와 같이 맵핑이 된다
tokened_x = token.texts_to_sequences(X) # 정수인코딩 시켜준다
print(tokened_x) # 결과값: [1428, 1429, 818, 819, ...], [314, 30, 43, ...], ...
wordsize = len(token.word_index) + 1
print(len(tokened_x)) # 결과값: 136
print(wordsize) # 결과값: 3107

with open('./models/movie_token.pickle', 'wb') as f:
    pickle.dump(token, f)

max = 0
for i in range(len(tokened_x)):
    if max < len(tokened_x[i]):
        max = len(tokened_x[i])
print(max) # 결과값: 214

x_pad = pad_sequences(tokened_x, max)
# 정수인코딩된 tokened_x를 가장 긴 숫자를 포함하고 있는 max값으로 패딩해줌 / 함수 앞에 0을 넣어서 해준다 / 앞에 있는 정보가 뒤로 갈수록 흐려질 수 도 있기때문에
print(x_pad)

X_train, X_test, Y_train, Y_test = train_test_split(x_pad, onehot_y, test_size=0.2)
print(X_train.shape, Y_train.shape)
print(X_test.shape, Y_test.shape)

xy = X_train, X_test, Y_train, Y_test # xy는 형태가 튜플이다
xy = np.array(xy, dtype=object)
np.save('./movie_data_{}_wordsize_{}'.format(max, wordsize), xy)
